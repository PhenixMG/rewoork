generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Td2Zone {
  HEURES_SOMBRE
  CHEVAL_DE_FER
}

enum CombatRole {
  DPS
  HEAL
  TANK
}

enum AttendStatus {
  CONFIRMED
  LATE
  ABSENT
  SUBSTITUTE
}

enum SessionStatus {
  PLANNED
  LIVE
  DONE
  CANCELLED
}

enum InfractionType {
  WARN
  NOTE
  TIMEOUT
  MUTE
  KICK
  BAN
  SOFTBAN
  UNBAN
}

// ---------- Guild & Channels ----------
model Guild {
  id        String   @id @db.VarChar(32)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String? @db.VarChar(100)
  locale String? @db.VarChar(8)
  tz     String? @db.VarChar(64)

  channels   GuildChannels?
  raids      Raid[]
  activities Activity[]
  incursions Incursion[]

  // Relations modération
  moderationSettings GuildModerationSettings?
  automodRules       AutomodRule[]
  infractions        Infraction[]
  modNotes           ModNote[]
  guildRoles         GuildRoles[]

  // Profils utilisateurs par guilde
  profiles UserProfile[]

  @@index([locale])
  @@index([tz])
}

model GuildChannels {
  guildId                   String   @id @db.VarChar(32)
  welcomeChannelId          String   @db.VarChar(32)
  goodbyeChannelId          String   @db.VarChar(32)
  logChannelId              String   @db.VarChar(32)
  botAnnouncementsChannelId String   @db.VarChar(32)
  raidsTd2ChannelId         String?  @db.VarChar(32)
  activitiesTd2ChannelId    String?  @db.VarChar(32)
  incursionChannelId        String?  @db.VarChar(32)
  buildChannelId            String?  @db.VarChar(32)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

// ---------- Builds & Points ----------
model PlayerBuild {
  id               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  userId           String             @db.VarChar(32)
  guildId          String             @db.VarChar(32)
  role             CombatRole
  name             String             @db.VarChar(100)
  details          String?            @db.Text
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  playerBuildImage PlayerBuildImage[]

  @@unique([guildId, userId, name])
  @@index([guildId, userId])
  @@index([guildId, role])
}

model PlayerBuildImage {
  id        BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  buildId   BigInt @db.UnsignedBigInt
  url       String @db.VarChar(512)
  filename  String @db.VarChar(128)
  mimeType  String @db.VarChar(64)
  size      Int    @default(0)
  sortOrder Int    @default(0)

  build PlayerBuild @relation(fields: [buildId], references: [id], onDelete: Cascade)

  @@index([buildId, sortOrder])
}

model BuildDraft {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  guildId   String     @db.VarChar(32)
  userId    String     @db.VarChar(32)
  role      CombatRole
  images    Json
  createdAt DateTime   @default(now())
  expiresAt DateTime   @default(dbgenerated("(now() + interval 1 hour)")) // ou gère en code

  @@index([guildId, userId])
}

model PlayerPoints {
  guildId   String   @db.VarChar(32)
  userId    String   @db.VarChar(32)
  points    Int      @default(0)
  updatedAt DateTime @updatedAt

  @@id([guildId, userId])
}

model GuildRoles {
  guildId           String  @id @db.VarChar(32)
  raidManagerRoleId String? @db.VarChar(32)

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

// ---------- User Profiles ----------
model UserProfile {
  guildId   String   @db.VarChar(32)
  userId    String   @db.VarChar(32)
  alias     String?  @db.VarChar(64)
  tz        String?  @db.VarChar(64)
  note      String?  @db.VarChar(255)
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([guildId, userId])
}

// ---------- Raids TD2 ----------
model Raid {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  guildId        String        @db.VarChar(32)
  createdBy      String        @db.VarChar(32)
  zone           Td2Zone
  startAt        DateTime
  status         SessionStatus @default(PLANNED)
  notes          String?       @db.VarChar(255)
  reminder15Sent Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  postChannelId String? @db.VarChar(32)
  postMessageId String? @db.VarChar(32)

  guild        Guild             @relation(fields: [guildId], references: [id], onDelete: Cascade)
  participants RaidParticipant[]

  voiceChannelId     String? @db.VarChar(32)
  startPointsGranted Boolean @default(false)
  rosterLocked       Boolean @default(false)

  @@unique([postChannelId, postMessageId])
  @@index([guildId, status, startAt])
}

model RaidParticipant {
  raidId       BigInt       @db.UnsignedBigInt
  userId       String       @db.VarChar(32)
  role         CombatRole
  secondChoice CombatRole?
  status       AttendStatus @default(CONFIRMED)
  position     Int?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  cancelledAt DateTime?

  raid Raid @relation(fields: [raidId], references: [id], onDelete: Cascade)

  @@id([raidId, userId])
  @@unique([raidId, position])
  @@index([raidId, role])
  @@index([raidId, status])
  @@index([userId])
}

// ---------- Activités TD2 ----------
model Activity {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  guildId        String        @db.VarChar(32)
  createdBy      String        @db.VarChar(32)
  kind           String        @db.VarChar(50)
  name           String        @db.VarChar(100)
  startAt        DateTime?
  status         SessionStatus @default(PLANNED)
  maxPlayers     Int           @default(4)
  notes          String?       @db.VarChar(255)
  reminder15Sent Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  postChannelId String? @db.VarChar(32)
  postMessageId String? @db.VarChar(32)

  guild        Guild                 @relation(fields: [guildId], references: [id], onDelete: Cascade)
  participants ActivityParticipant[]

  @@unique([postChannelId, postMessageId])
  @@index([guildId, status, startAt])
  @@index([kind])
}

model ActivityParticipant {
  activityId BigInt  @db.UnsignedBigInt
  userId     String  @db.VarChar(32)
  isSub      Boolean @default(false)
  position   Int?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  cancelledAt DateTime?

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@id([activityId, userId])
  @@unique([activityId, position])
  @@index([userId])
}

// ---------- Incursions TD2 ----------
model Incursion {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  guildId        String        @db.VarChar(32)
  createdBy      String        @db.VarChar(32)
  name           String        @db.VarChar(100)
  difficulty     String?       @db.VarChar(32)
  startAt        DateTime?
  status         SessionStatus @default(PLANNED)
  maxPlayers     Int           @default(4)
  notes          String?       @db.VarChar(255)
  reminder15Sent Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  postChannelId  String?       @db.VarChar(32)
  postMessageId  String?       @db.VarChar(32)

  guild        Guild                  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  participants IncursionParticipant[]

  @@unique([postChannelId, postMessageId])
  @@index([guildId, status, startAt])
}

model IncursionParticipant {
  incursionId  BigInt       @db.UnsignedBigInt
  userId       String       @db.VarChar(32)
  role         CombatRole
  secondChoice CombatRole?
  status       AttendStatus @default(CONFIRMED)
  position     Int?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  cancelledAt DateTime?

  incursion Incursion @relation(fields: [incursionId], references: [id], onDelete: Cascade)

  @@id([incursionId, userId])
  @@unique([incursionId, position])
  @@index([incursionId, role])
  @@index([incursionId, status])
  @@index([userId])
}

// ---------- Modération ----------
model GuildModerationSettings {
  guildId             String   @id @db.VarChar(32)
  muteRoleId          String?  @db.VarChar(32)
  maxWarnsMuteMinutes Int?
  maxWarnsKick        Int?
  maxWarnsBanDays     Int?
  warnDecayDays       Int?
  automodEnabled      Boolean  @default(false)
  blockInvites        Boolean  @default(false)
  blockLinks          Boolean  @default(false)
  capsThreshold       Int?
  mentionThreshold    Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model AutomodRule {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  guildId   String   @db.VarChar(32)
  key       String   @db.VarChar(64)
  enabled   Boolean  @default(true)
  config    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, key])
  @@index([guildId])
}

model CaseSeq {
  guildId    String @id @db.VarChar(32)
  lastNumber Int    @default(0)
}

model Infraction {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  guildId      String         @db.VarChar(32)
  caseNumber   Int
  userId       String         @db.VarChar(32)
  moderatorId  String         @db.VarChar(32)
  type         InfractionType
  reason       String?        @db.VarChar(1024)
  evidenceUrl  String?        @db.VarChar(255)
  createdAt    DateTime       @default(now())
  expiresAt    DateTime?
  active       Boolean        @default(true)
  closedAt     DateTime?
  closedBy     String?        @db.VarChar(32)
  logChannelId String?        @db.VarChar(32)
  logMessageId String?        @db.VarChar(32)

  guild       Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade)
  attachments CaseAttachment[]

  @@unique([guildId, caseNumber])
  @@index([guildId, userId])
  @@index([active, expiresAt])
  @@index([createdAt])
  @@index([type])
}

model CaseAttachment {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  infractionId BigInt   @db.UnsignedBigInt
  url          String   @db.VarChar(255)
  createdAt    DateTime @default(now())

  infraction Infraction @relation(fields: [infractionId], references: [id], onDelete: Cascade)

  @@index([infractionId])
}

model ModNote {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  guildId     String   @db.VarChar(32)
  userId      String   @db.VarChar(32)
  moderatorId String   @db.VarChar(32)
  content     String   @db.VarChar(1024)
  createdAt   DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId, userId, createdAt])
}

// ---------- Scheduled Jobs ----------
model Job {
  id      BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  kind    String   @db.VarChar(32)
  dueAt   DateTime
  payload Json

  lockedAt  DateTime?
  lockedBy  String?   @db.VarChar(64) // id d’instance / hostname
  attempts  Int       @default(0) // nb de tentatives
  lastError String?   @db.VarChar(255) // dernier message d’erreur

  doneAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([dueAt, kind])
  @@index([lockedAt])
  @@index([doneAt])
}
